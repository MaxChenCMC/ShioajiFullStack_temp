<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleBase</name>
    </assembly>
    <members>
        <member name="T:SimpleBase.Base16">
            <summary>
            Hexadecimal encoding/decoding.
            </summary>
        </member>
        <member name="M:SimpleBase.Base16.EncodeUpper(System.ReadOnlySpan{System.Byte})">
            <summary>
            Encode to Base16 representation using uppercase lettering.
            </summary>
            <param name="bytes">Bytes to encode.</param>
            <returns>Base16 string.</returns>
        </member>
        <member name="M:SimpleBase.Base16.EncodeLower(System.ReadOnlySpan{System.Byte})">
            <summary>
            Encode to Base16 representation using lowercase lettering.
            </summary>
            <param name="bytes">Bytes to encode.</param>
            <returns>Base16 string.</returns>
        </member>
        <member name="M:SimpleBase.Base16.Decode(System.String)">
            <summary>
            Decode an encoded text into bytes.
            </summary>
            <param name="text">Input text.</param>
            <returns>Result bytes.</returns>
        </member>
        <member name="M:SimpleBase.Base16.Decode(System.ReadOnlySpan{System.Char})">
            <summary>
            Decode Base16 text into bytes.
            </summary>
            <param name="text">Base16 text.</param>
            <returns>Decoded bytes.</returns>
        </member>
        <member name="M:SimpleBase.Base16.Decode(System.IO.TextReader,System.IO.Stream)">
            <summary>
            Decode Base16 text through streams for generic use. Stream based variant tries to consume
            as little memory as possible, and relies of .NET's own underlying buffering mechanisms,
            contrary to their buffer-based versions.
            </summary>
            <param name="input">Stream that the encoded bytes would be read from.</param>
            <param name="output">Stream where decoded bytes will be written to.</param>
        </member>
        <member name="M:SimpleBase.Base16.DecodeAsync(System.IO.TextReader,System.IO.Stream)">
            <summary>
            Decode Base16 text through streams for generic use. Stream based variant tries to consume
            as little memory as possible, and relies of .NET's own underlying buffering mechanisms,
            contrary to their buffer-based versions.
            </summary>
            <param name="input">Stream that the encoded bytes would be read from.</param>
            <param name="output">Stream where decoded bytes will be written to.</param>
            <returns>Task that represents the async operation.</returns>
        </member>
        <member name="M:SimpleBase.Base16.EncodeUpper(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Encodes stream of bytes into a Base16 text.
            </summary>
            <param name="input">Stream that provides bytes to be encoded.</param>
            <param name="output">Stream that the encoded text is written to.</param>
        </member>
        <member name="M:SimpleBase.Base16.EncodeUpperAsync(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Encodes stream of bytes into a Base16 text.
            </summary>
            <param name="input">Stream that provides bytes to be encoded.</param>
            <param name="output">Stream that the encoded text is written to.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:SimpleBase.Base16.EncodeLower(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Encodes stream of bytes into a Base16 text.
            </summary>
            <param name="input">Stream that provides bytes to be encoded.</param>
            <param name="output">Stream that the encoded text is written to.</param>
        </member>
        <member name="M:SimpleBase.Base16.EncodeLowerAsync(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Encodes stream of bytes into a Base16 text.
            </summary>
            <param name="input">Stream that provides bytes to be encoded.</param>
            <param name="output">Stream that the encoded text is written to.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:SimpleBase.Base32">
            <summary>
            Base32 encoding/decoding functions.
            </summary>
        </member>
        <member name="M:SimpleBase.Base32.#ctor(SimpleBase.Base32Alphabet)">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleBase.Base32"/> class with a
            custom alphabet.
            </summary>
            <param name="alphabet">Alphabet to use.</param>
        </member>
        <member name="P:SimpleBase.Base32.Crockford">
            <summary>
            Gets Douglas Crockford's Base32 flavor with substitution characters.
            </summary>
        </member>
        <member name="P:SimpleBase.Base32.Rfc4648">
            <summary>
            Gets RFC 4648 variant of Base32 coder.
            </summary>
        </member>
        <member name="P:SimpleBase.Base32.ExtendedHex">
            <summary>
            Gets Extended Hex variant of Base32 coder.
            </summary>
            <remarks>Also from RFC 4648.</remarks>
        </member>
        <member name="P:SimpleBase.Base32.ZBase32">
            <summary>
            Gets z-base-32 variant of Base32 coder.
            </summary>
            <remarks>This variant is used in Mnet, ZRTP and Tahoe-LAFS.</remarks>
        </member>
        <member name="P:SimpleBase.Base32.Geohash">
            <summary>
            Gets Geohash variant of Base32 coder.
            </summary>
        </member>
        <member name="M:SimpleBase.Base32.Encode(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Encode a byte array into a Base32 string.
            </summary>
            <param name="bytes">Buffer to be encoded.</param>
            <param name="padding">Append padding characters in the output.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:SimpleBase.Base32.Decode(System.String)">
            <summary>
            Decode a Base32 encoded string into a byte array.
            </summary>
            <param name="text">Encoded Base32 characters.</param>
            <returns>Decoded byte array.</returns>
        </member>
        <member name="M:SimpleBase.Base32.Decode(System.ReadOnlySpan{System.Char})">
            <summary>
            Decode a Base32 encoded string into a byte array.
            </summary>
            <param name="text">Encoded Base32 string.</param>
            <returns>Decoded byte array.</returns>
        </member>
        <member name="M:SimpleBase.Base32.Encode(System.IO.Stream,System.IO.TextWriter,System.Boolean)">
            <summary>
            Encode a binary stream to a Base32 text stream.
            </summary>
            <param name="input">Input bytes.</param>
            <param name="output">The writer the output is written to.</param>
            <param name="padding">Whether to use padding at the end of the output.</param>
        </member>
        <member name="M:SimpleBase.Base32.EncodeAsync(System.IO.Stream,System.IO.TextWriter,System.Boolean)">
            <summary>
            Encode a binary stream to a Base32 text stream.
            </summary>
            <param name="input">Input bytes.</param>
            <param name="output">The writer the output is written to.</param>
            <param name="padding">Whether to use padding at the end of the output.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:SimpleBase.Base32.Decode(System.IO.TextReader,System.IO.Stream)">
            <summary>
            Decode a text stream into a binary stream.
            </summary>
            <param name="input">TextReader open on the stream.</param>
            <param name="output">Binary output stream.</param>
        </member>
        <member name="M:SimpleBase.Base32.DecodeAsync(System.IO.TextReader,System.IO.Stream)">
            <summary>
            Decode a text stream into a binary stream.
            </summary>
            <param name="input">TextReader open on the stream.</param>
            <param name="output">Binary output stream.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:SimpleBase.Base32Alphabet">
            <summary>
            Base32 alphabet flavors.
            </summary>
        </member>
        <member name="M:SimpleBase.Base32Alphabet.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleBase.Base32Alphabet"/> class.
            </summary>
            <param name="alphabet">Characters.</param>
        </member>
        <member name="P:SimpleBase.Base32Alphabet.Crockford">
            <summary>
            Gets Crockford alphabet.
            </summary>gpg
        </member>
        <member name="P:SimpleBase.Base32Alphabet.Rfc4648">
            <summary>
            Gets RFC4648 alphabet.
            </summary>
        </member>
        <member name="P:SimpleBase.Base32Alphabet.ExtendedHex">
            <summary>
            Gets Extended Hex alphabet.
            </summary>
        </member>
        <member name="P:SimpleBase.Base32Alphabet.ZBase32">
            <summary>
            Gets z-base-32 alphabet.
            </summary>
        </member>
        <member name="P:SimpleBase.Base32Alphabet.Geohash">
            <summary>
            Gets Geohash alphabet.
            </summary>
        </member>
        <member name="T:SimpleBase.Base58">
            <summary>
            Base58 Encoding/Decoding implementation.
            </summary>
            <remarks>
            Base58 doesn't contain Stream-based interface because it's not feasible to use
            for large buffer sizes.
            </remarks>
        </member>
        <member name="M:SimpleBase.Base58.#ctor(SimpleBase.Base58Alphabet)">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleBase.Base58"/> class
            using a custom alphabet.
            </summary>
            <param name="alphabet">Alphabet to use.</param>
        </member>
        <member name="P:SimpleBase.Base58.Bitcoin">
            <summary>
            Gets Bitcoin flavor.
            </summary>
        </member>
        <member name="P:SimpleBase.Base58.Ripple">
            <summary>
            Gets Ripple flavor.
            </summary>
        </member>
        <member name="P:SimpleBase.Base58.Flickr">
            <summary>
            Gets Flickr flavor.
            </summary>
        </member>
        <member name="M:SimpleBase.Base58.Encode(System.ReadOnlySpan{System.Byte})">
            <summary>
            Encode to Base58 representation.
            </summary>
            <param name="bytes">Bytes to encode.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:SimpleBase.Base58.Decode(System.String)">
            <summary>
            Decode a Base58 representation.
            </summary>
            <param name="text">Encoded text.</param>
            <returns>Decoded bytes.</returns>
        </member>
        <member name="M:SimpleBase.Base58.Decode(System.ReadOnlySpan{System.Char})">
            <summary>
            Decode a Base58 representation.
            </summary>
            <param name="text">Base58 encoded text.</param>
            <returns>Array of decoded bytes.</returns>
        </member>
        <member name="T:SimpleBase.Base58Alphabet">
            <summary>
            Base58 alphabet.
            </summary>
        </member>
        <member name="M:SimpleBase.Base58Alphabet.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleBase.Base58Alphabet"/> class
            using a custom alphabet.
            </summary>
            <param name="alphabet">Alphabet to use.</param>
        </member>
        <member name="P:SimpleBase.Base58Alphabet.Bitcoin">
            <summary>
            Gets Bitcoin alphabet.
            </summary>
        </member>
        <member name="P:SimpleBase.Base58Alphabet.Ripple">
            <summary>
            Gets Base58 alphabet.
            </summary>
        </member>
        <member name="P:SimpleBase.Base58Alphabet.Flickr">
            <summary>
            Gets Flickr alphabet.
            </summary>
        </member>
        <member name="T:SimpleBase.Base85">
            <summary>
            Base58 encoding/decoding class.
            </summary>
        </member>
        <member name="M:SimpleBase.Base85.#ctor(SimpleBase.Base85Alphabet)">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleBase.Base85"/> class
            using a custom alphabet.
            </summary>
            <param name="alphabet">Alphabet to use.</param>
        </member>
        <member name="P:SimpleBase.Base85.Z85">
            <summary>
            Gets Z85 flavor of Base85.
            </summary>
        </member>
        <member name="P:SimpleBase.Base85.Ascii85">
            <summary>
            Gets Ascii85 flavor of Base85.
            </summary>
        </member>
        <member name="M:SimpleBase.Base85.Encode(System.ReadOnlySpan{System.Byte})">
            <summary>
            Encode the given bytes into Base85.
            </summary>
            <param name="bytes">Bytes to encode.</param>
            <returns>Encoded text.</returns>
        </member>
        <member name="M:SimpleBase.Base85.Encode(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Encode a given stream into a text writer.
            </summary>
            <param name="input">Input stream.</param>
            <param name="output">Output writer.</param>
        </member>
        <member name="M:SimpleBase.Base85.EncodeAsync(System.IO.Stream,System.IO.TextWriter)">
            <summary>
            Encode a given stream into a text writer.
            </summary>
            <param name="input">Input stream.</param>
            <param name="output">Output writer.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:SimpleBase.Base85.Decode(System.IO.TextReader,System.IO.Stream)">
            <summary>
            Decode a text reader into a stream.
            </summary>
            <param name="input">Input reader.</param>
            <param name="output">Output stream.</param>
        </member>
        <member name="M:SimpleBase.Base85.DecodeAsync(System.IO.TextReader,System.IO.Stream)">
            <summary>
            Decode a text reader into a stream.
            </summary>
            <param name="input">Input reader.</param>
            <param name="output">Output stream.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:SimpleBase.Base85.Decode(System.String)">
            <summary>
            Decode a given text into a span.
            </summary>
            <param name="text">Input text.</param>
            <returns>Output span.</returns>
        </member>
        <member name="M:SimpleBase.Base85.Decode(System.ReadOnlySpan{System.Char})">
            <summary>
            Decode given characters into bytes.
            </summary>
            <param name="text">Characters to decode.</param>
            <returns>Decoded bytes.</returns>
        </member>
        <member name="T:SimpleBase.Base85Alphabet">
            <summary>
            Base85 Alphabet.
            </summary>
        </member>
        <member name="M:SimpleBase.Base85Alphabet.#ctor(System.String,System.Nullable{System.Char},System.Nullable{System.Char})">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleBase.Base85Alphabet"/> class
            using custom settings.
            </summary>
            <param name="alphabet">Alphabet to use.</param>
            <param name="allZeroShortcut">Character to substitute for all zero.</param>
            <param name="allSpaceShortcut">Character to substitute for all space.</param>
        </member>
        <member name="P:SimpleBase.Base85Alphabet.Z85">
            <summary>
            Gets ZeroMQ Z85 Alphabet.
            </summary>
        </member>
        <member name="P:SimpleBase.Base85Alphabet.Ascii85">
            <summary>
            Gets Adobe Ascii85 Alphabet (each character is directly produced by raw value + 33),
            also known as "btoa" encoding.
            </summary>
        </member>
        <member name="P:SimpleBase.Base85Alphabet.AllZeroShortcut">
            <summary>
            Gets the character to be used for "all zeros".
            </summary>
        </member>
        <member name="P:SimpleBase.Base85Alphabet.AllSpaceShortcut">
            <summary>
            Gets the character to be used for "all spaces".
            </summary>
        </member>
        <member name="P:SimpleBase.Base85Alphabet.HasShortcut">
            <summary>
            Gets a value indicating whether the alphabet uses one of shortcut characters for all spaces
            or all zeros.
            </summary>
        </member>
        <member name="T:SimpleBase.EncodingAlphabet">
            <summary>
            A single encoding algorithm can support many different alphabets.
            EncodingAlphabet consists of a basis for implementing different
            alphabets for different encodings. It's suitable if you want to
            implement your own encoding based on the existing base classes.
            </summary>
        </member>
        <member name="F:SimpleBase.EncodingAlphabet.lookupLength">
            <summary>
            Specifies the highest possible char value in an encoding alphabet
            Any char above with would raise an exception.
            </summary>
        </member>
        <member name="F:SimpleBase.EncodingAlphabet.reverseLookupTable">
            <summary>
            Holds a mapping from character to an actual byte value
            The values are held as "value + 1" so a zero would denote "not set"
            and would cause an exception.
            </summary>
            <remarks>byte[] has no discernible perf impact and saves memory.</remarks>
        </member>
        <member name="M:SimpleBase.EncodingAlphabet.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleBase.EncodingAlphabet"/> class.
            </summary>
            <param name="length">Length of the alphabe.</param>
            <param name="alphabet">Alphabet character.</param>
        </member>
        <member name="P:SimpleBase.EncodingAlphabet.Length">
            <summary>
            Gets the length of the alphabet.
            </summary>
        </member>
        <member name="P:SimpleBase.EncodingAlphabet.Value">
            <summary>
            Gets the characters of the alphabet.
            </summary>
        </member>
        <member name="M:SimpleBase.EncodingAlphabet.InvalidCharacter(System.Char)">
            <summary>
            Generates a standard invalid character exception for alphabets.
            </summary>
            <remarks>
            The reason this is not a throwing method itself is
            that the compiler has no way of knowing whether the execution
            will end after the method call and can incorreclty assume
            reachable code.
            </remarks>
            <param name="c">Characters.</param>
            <returns>Exception to be thrown.</returns>
        </member>
        <member name="M:SimpleBase.EncodingAlphabet.ToString">
            <summary>
            Get the string representation of the alphabet.
            </summary>
            <returns>The characters of the encoding alphabet.</returns>
        </member>
        <member name="M:SimpleBase.EncodingAlphabet.Map(System.Char,System.Int32)">
            <summary>
            Map a character to a value.
            </summary>
            <param name="c">Characters.</param>
            <param name="value">Corresponding value.</param>
        </member>
        <member name="T:SimpleBase.StreamHelper">
            <summary>
            Provides Stream functionality to any buffer-based encoding operation.
            </summary>
        </member>
    </members>
</doc>
